### PWD
/Users/patriciasilva/PycharmProjects/PythonProject/AI Diet and Meal Planner/AI Diet and Meal Planner/task
### Python
Python 3.12.7
### Tree
.
├── app
│   ├── agents
│   │   ├── __init__.py
│   │   ├── diet_agent.py
│   │   ├── inventory_agent.py
│   │   ├── manager_agent.py
│   │   └── planner_agent.py
│   ├── logging.py
│   ├── models.py
│   └── services
│       ├── __init__.py
│       └── llm_client.py
├── docker-compose.yml
├── Dockerfile
├── main.py
├── requirements.txt
├── stage5_diag.txt
├── test
│   ├── __init__.py
│   └── tests.py
└── tests.py

5 directories, 17 files
### main.py (head)
# main.py
from typing import List, Dict, Any
from fastapi import FastAPI
from pydantic import BaseModel

from app.agents.manager_agent import ManagerAgent
from app.agents.planner_agent import PlannerAgent
from app.models import RecipeResponse
from app.logging import get_logger

app = FastAPI(title="AI Diet & Meal Planner – Orchestrated")
manager = ManagerAgent()
planner = PlannerAgent()
logger = get_logger("app") 

# Health check (grader expects this)
@app.get("/")
def root():
    return {"message": "Success"}

# Stage 3
class AskInput(BaseModel):
    items: List[str]
    diet: str

@app.post("/ask")
@app.post("/ask/")
def ask(payload: AskInput) -> Dict[str, Any]:
    return manager.run(payload.items, payload.diet)

# Stage 4
class PlanInput(BaseModel):
    base_recipe: str

@app.post("/plan", response_model=RecipeResponse)
@app.post("/plan/", response_model=RecipeResponse)
def plan(payload: PlanInput) -> RecipeResponse:
    return planner.run(payload.base_recipe)

class RecommendInput(BaseModel):
    items: List[str]
    diet: str
    recipe_count: int = 2  # capped to 5 below

@app.post("/recommend")
@app.post("/recommend/")
def recommend(payload: RecommendInput) -> Dict[str, List[RecipeResponse]]:
    agg = manager.run(payload.items, payload.diet)
    suggestions: List[str] = list(agg.get("suggestions", []) or [])
    diet_filtered: List[str] = list(agg.get("diet_filtered", []) or [])

    n = max(1, min(int(payload.recipe_count or 1), 5))
    bases = suggestions[:n]
    if not bases:
        suffix = ", ".join(diet_filtered[:3]) if diet_filtered else payload.diet.title()
        bases = [f"{payload.diet.title()} {t} with {suffix}".strip()
                 for t in ["Bowl", "Stir Fry", "Skillet", "Salad", "Soup"][:n]]

    recipes: List[RecipeResponse] = []
    for b in bases:
        try:
            recipes.append(planner.run(b))
        except Exception as e:
            print(f"⚠️ /recommend planning error for '{b}': {e}")
            # last-resort fallback if PlannerAgent.run ever raised
            recipes.append(RecipeResponse(
                title=b,
                ingredients=["oil", "salt", "pepper"],
                steps=[
                    RecipeStep(step_number=1, instruction="Prep ingredients."),
                    RecipeStep(step_number=2, instruction="Cook."),
                    RecipeStep(step_number=3, instruction="Serve."),
                ],
            ))

    return {"recipes": recipes}

### logging.py
# app/logging.py
import logging

def get_logger(name: str) -> logging.Logger:
    logger = logging.getLogger(name)
    logger.setLevel(logging.INFO)

    if not logger.handlers:
        handler = logging.StreamHandler()
        handler.setFormatter(logging.Formatter(
            "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
        ))
        logger.addHandler(handler)

    return logger

### routes (introspected)
/openapi.json {'GET', 'HEAD'}
/docs {'GET', 'HEAD'}
/docs/oauth2-redirect {'GET', 'HEAD'}
/redoc {'GET', 'HEAD'}
/ {'GET'}
/ask/ {'POST'}
/ask {'POST'}
/plan/ {'POST'}
/plan {'POST'}
/recommend/ {'POST'}
/recommend {'POST'}
### root
HTTP/1.1 200 OK
date: Tue, 12 Aug 2025 21:00:30 GMT
server: uvicorn
content-length: 21
content-type: application/json

{"message":"Success"}
### /plan
HTTP/1.1 200 OK
date: Tue, 12 Aug 2025 21:00:30 GMT
server: uvicorn
content-length: 291
content-type: application/json

{"title":"Vegan Stir Fry","ingredients":["oil","salt","pepper","garlic","onion"],"steps":[{"step_number":1,"instruction":"Prep ingredients."},{"step_number":2,"instruction":"Heat oil in pan."},{"step_number":3,"instruction":"Cook and season."},{"step_number":4,"instruction":"Serve warm."}]}
### /recommend
HTTP/1.1 200 OK
date: Tue, 12 Aug 2025 21:00:30 GMT
server: uvicorn
content-length: 606
content-type: application/json

{"recipes":[{"title":"Vegan Stir Fry","ingredients":["oil","salt","pepper","garlic","onion"],"steps":[{"step_number":1,"instruction":"Prep ingredients."},{"step_number":2,"instruction":"Heat oil in pan."},{"step_number":3,"instruction":"Cook and season."},{"step_number":4,"instruction":"Serve warm."}]},{"title":"Tofu and Veggie Skewers","ingredients":["oil","salt","pepper","garlic","onion"],"steps":[{"step_number":1,"instruction":"Prep ingredients."},{"step_number":2,"instruction":"Heat oil in pan."},{"step_number":3,"instruction":"Cook and season."},{"step_number":4,"instruction":"Serve warm."}]}]}
